
#Maze test
import turtle
import math

 
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Maze test")
wn.setup(700,700)
wn.tracer(0)
 
#Create Pen
class Pen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up (self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() + 24   

        if(move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)         

    def go_down (self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() - 24 

        if(move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)  

    def go_left (self):
        move_to_x = player.xcor() - 24
        move_to_y = player.ycor()

        if(move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)  

    def go_right (self):
       move_to_x = player.xcor() + 24
       move_to_y = player.ycor() 

       if(move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y) 

    def is_collision(self, other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        distance = math.sqrt((a ** 2) + (b ** 2) )     

        if distance < 5:
            return True
        else:
            return False    
    

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("circle")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x, y)

    def destroy(self):
        self.goto(2000, 2000)
        self.hideturtle()

    
 
#Create Levels List
levels = [""]
 
#Define First Level
level_1 = [
"XXXXXXXXXXXXXXXXXXXXXXXXX",
"XP XXXXXX           XXXXX",
"X  XXXXXXX  XXXXXX  XXXXX",
"X       XX  XXXXX   XXXXX",
"X       XX  XXX        XX",
"XXXXXX  XX  XXX        XX",
"XXXXXX  XX  XXXXXT  XXXXX",
"XXXXXX  XX    XXXX  XXXXX",
"X  XXX        XXXX  XXXXX",
"X  XXX  XXX  XXXXXXXXXXXX",
"X         XXTXXXXXXXXXXXX",
"X                XXXXXXXX",
"XXXXXXXXXXX      XXXXX  X",
"XXXXXXXXXXXXXXX  XXXXX  X",
"XXX  XXXXXXXXXX         X",
"XXX                     X",
"XXX          XXXXXXXXXXXX",
"XXXXXXXXXX  XXXXXXXXXXXXX",
"XXXXXXXXXT             X",
"XX   XXXXX              X",
"XX   XXXXXXXXXXXT   XXXXX",
"XX    XXXXXXXXXXXX  XXXXX",
"XT          XXXX        X",
"XXXX                    X",
"XXXXXXXXXXXXXXXXXXXXXXXXX"
]

treasures = []

 
#Add to Mazes List
levels.append(level_1)
 
#Create Level Setup Function
def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            #get the character at each x,y coordinate
            #Note the order of y and x in the next line
            character = level[y][x]
            #Calculate the screen x,y coordinates
            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)
 
            #Check if it is an X (Representing a wall)
            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()

                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))    

              

              
 
#Create class instances
pen = Pen()
player = Player()

walls = []

wn.listen()
wn.onkey(player.go_left,'Left')
wn.onkey(player.go_right,'Right')
wn.onkey(player.go_up,'Up')
wn.onkey(player.go_down,'Down')

wn.tracer(0)


#Setup the level
setup_maze(levels[1])
 
#Main game loop
while True:

    for treasure in treasures:
        if player.is_collision(treasure):
            
            player.gold += treasure.gold
            print("Player Gold {}".format(player.gold))
            treasure.destroy()
            treasures.remove(treasure)



    wn.update()
